[project]
name = "cimsparql"
dynamic = ["version"]
description = "CIM query utilities"
readme = "README.md"
authors = [{name="Statnett Datascience", email="Datascience.Drift@Statnett.no"}]

requires-python = ">=3.11"
dependencies = [
    "httpx>=0.27.2",
    "numpy>=1.9.0",
    "pandas>=2.2.3",
    "pandera==0.20.4", # https://github.com/unionai-oss/pandera/issues/1856
    "polyfactory>=2.17.0",
    "pydantic>=2.9.2",
    "rdflib>=7.0.0",
    "sparqlwrapper>=2.0.0",
    "tenacity>=9.0.0",
]

[tool.uv]
dev-dependencies = [
    "asyncio>=3.4.3",
    "coverage[toml]>=7.6.1",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-httpserver>=1.1.0",
    "pytest-integration>=0.2.3",
    "pytest-profiling>=1.7.0",
]

[tool.setuptools_scm]
version_scheme="release-branch-semver"
local_scheme = "no-local-version"

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
  "A", # flake8-builtins
  "ANN", # flake8-annotations
  "ARG", # flake8-unused-arguments
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "COM", # flake8-commas
  "DTZ", # flake8-datetimez
  "E", "W", # pycodestyle
  "F", # Pyflakes
  "FLY", # flynt
  "FURB", # refurb
  "I", # isort
  "N", # pep8-nameing
  "NPY", # numpy specific rules
  "PERF", # Perflint
  "PIE", # flake8-pie
  "RUF", # Ruff specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TRY", # tryceratops
  "UP", # pyupgrade
  "YTT", # flake8-2020
]

ignore = ['S101', 'COM812', 'ANN101', 'ANN102', 'ANN401', 'TRY003']

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.per-file-ignores]
"cimsparql/data_models.py" = ["N815"]
"docs/conf.py" = ["A001"]
"tests/test*.py" = ["ANN201"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pandera.dataframe_check"]

[tool.ruff.lint.flake8-import-conventions]

[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
pandas = "pd"
pandera = "pa"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
              "pragma: no cover",
              "raise AssertionError",
              "raise NotImplementedError",
              "if verbose:",
              "if 0:",
              "if False:",
              "if TYPE_CHECKING:",
              ]
skip_covered = true
show_missing = true
precision = 2

[tool.coverage.run]
branch = true
source = ["cimsparql",  "conftest", "tests"]

[tool.pytest.ini_options]
asyncio_mode = 'auto'
asyncio_default_fixture_loop_scope = "function"
log_file = "pytest.log"
log_level = "DEBUG"
log_file_format = "%(asctime)s - %(name)s - %(levelname)s: %(message)s"
norecursedirs = "_build tmp*  __pycache__ src prof wheel_files tests/t_utils"
filterwarnings = [
  "ignore: NQuadsSerializer does not use custom encoding. Given encoding was.*:UserWarning"
]

markers = [
  "integration: Mark test as an integration test",
  "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]

[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"
