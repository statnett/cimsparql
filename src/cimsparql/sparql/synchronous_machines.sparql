# Name: Synchronous machines
PREFIX cim: <${cim}>
PREFIX SN: <${SN}>
PREFIX xsd: <${xsd}>
SELECT ?mrid ?name ?market_code ?status ?station_group ?station_group_name ?substation_mrid ?max_p ?min_p ?merit_order ?sn ?p ?q ?connectivity_node ?generator_type ?schedule_resource ?afrr_prequalified WHERE {
  # Extract properties for synchronous machines.
  {
    SELECT * WHERE {
      ?_eq_subject <http://entsoe.eu/CIM/EquipmentCore/3/1> ?eq_repo .
      SERVICE ?eq_repo {
        ?machine a cim:SynchronousMachine ;
                 cim:IdentifiedObject.mRID ?machine_mrid ;
                 cim:IdentifiedObject.name ?name ;
                 cim:RotatingMachine.ratedS ?sn ;
                 ^cim:Terminal.ConductingEquipment ?terminal ;
                 cim:Equipment.EquipmentContainer/cim:VoltageLevel.Substation ?substation .
        # TODO: Seems like cim15 uses SynchronousMachine while cim16 uses RotatingMachine. Will fix this when we have a proper cim16 model
        OPTIONAL {
          VALUES ?gen_type { cim:NuclearGeneratingUnit cim:MktGeneratingUnit cim:HydroGeneratingUnit cim:WindGeneratingUnit cim:ThermalGeneratingUnit cim:SolarGeneratingUnit }
          ?machine cim:SynchronousMachine.GeneratingUnit | cim:RotatingMachine.GeneratingUnit ?nullable_gen_unit .
          ?nullable_gen_unit a ?gen_type
        }
        BIND (COALESCE(?nullable_gen_unit, URI("http://no-gen-unit")) AS ?gen_unit)
        ?terminal cim:Terminal.ConnectivityNode ?con_node .
        ?con_node cim:IdentifiedObject.mRID ?connectivity_node .
        # Extract area and mrid for the substation associated with a sync machine
        ?substation cim:Substation.Region/cim:SubGeographicalRegion.Region/cim:IdentifiedObject.name ?area ;
                    cim:IdentifiedObject.mRID ?substation_mrid .
        # Optionally extract min/max operating power for each machin
        OPTIONAL {
          ?gen_unit cim:IdentifiedObject.mRID ?gen_unit_mrid ;
                    cim:GeneratingUnit.minOperatingP ?nullable_minP ;
                    cim:GeneratingUnit.maxOperatingP ?nullable_maxP .
          OPTIONAL {
            ?gen_unit SN:GeneratingUnit.marketCode ?market_code ;
                      SN:GeneratingUnit.groupAllocationWeight ?merit_order ;
                      SN:GeneratingUnit.ScheduleResource ?ScheduleResource .
            ?ScheduleResource SN:ScheduleResource.marketCode ?station_group ;
                              cim:IdentifiedObject.mRID ?schedule_resource ;
                              cim:IdentifiedObject.name ?station_group_name .
          }
        }
        FILTER REGEX(?area,'${region}')
        # Opionally extract non-CIM standard properties generating units
        OPTIONAL {
          ?machine SN:Equipment.networkAnalysisEnable ?_network_analysis
        }
        BIND (IF(BOUND(?gen_type),replace(STR(?gen_type), STR(cim:), ""),"unknown") AS ?generator_type)
        BIND (COALESCE(?gen_unit_mrid, ?machine_mrid) AS ?mrid)
        BIND (EXISTS {
          ?gen_unit SN:GeneratingUnit.ScheduleFRRResource []
        } AS ?afrr_prequalified)
      }
    }
  }
  ?terminal cim:ACDCTerminal.connected ?connected .
  OPTIONAL {
    ?machine ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService ?in_service
  } .
  OPTIONAL {
    ?machine cim:RotatingMachine.p ?p ;
             cim:RotatingMachine.q ?q .
  }
  BIND (COALESCE(?_network_analysis, True) AS ?network_analysis)
  BIND (COALESCE(?in_service, ?connected) AS ?status)
  BIND (COALESCE(?nullable_maxP, IF(xsd:double(STR(?p)) >= 0.0,?p,0.0), 0.0) AS ?max_p)
  BIND (COALESCE(?nullable_minP, IF(xsd:double(STR(?p)) < 0.0,?p,0.0), 0.0) AS ?min_p)
  FILTER (?network_analysis)
}
