# Name: Series compensators
PREFIX cim: <${cim}>
PREFIX SN: <${SN}>
PREFIX xsd: <${xsd}>
select
  (max(?mrid) as ?mrid)
  (max(?name) as ?name)
  (max(?bidzone_1) as ?bidzone_1)
  (max(?bidzone_2) as ?bidzone_2)
  (max(?node_1) as ?node_1)
  (max(?node_2) as ?node_2)
  (if (xsd:double(max(?p_1)) < xsd:double(max(?p_2)), xsd:double(max(?p_1)) + xsd:double(max(?p_2)), xsd:double(0.0)) as ?ploss_1)
  (if (xsd:double(max(?p_1)) > xsd:double(max(?p_2)), xsd:double(max(?p_1)) + xsd:double(max(?p_2)), xsd:double(0.0)) as ?ploss_2)
  (max(?r) as ?r)
  (max(?rate) as ?rate)
  (coalesce(max(?in_service), max(?connected_1) && max(?connected_2)) as ?status)
  (max(?un) as ?un)
  (max(?x) as ?x)
where {
  # Assume π equivalent with at least r,x and b shunt.
  # Extract properties for series compensator
  service <${eq_repo}> {
  ?compensator cim:SeriesCompensator.r ?r;
         cim:SeriesCompensator.x ?x;
         cim:IdentifiedObject.mRID ?mrid;
         cim:IdentifiedObject.name ?name;
         cim:ConductingEquipment.BaseVoltage/cim:BaseVoltage.nominalVoltage ?un;
         ^cim:Terminal.ConductingEquipment ?terminal .

  # Extract terminal properties
  ?terminal cim:Terminal.ConnectivityNode ?con_node;
            cim:ACDCTerminal.sequenceNumber ?nr .
  ?con_node cim:ConnectivityNode.ConnectivityNodeContainer/cim:VoltageLevel.Substation ?substation .
  ?substation cim:Substation.Region/cim:SubGeographicalRegion.Region/cim:IdentifiedObject.name ?area .
  optional {
    ?substation SN:Substation.MarketDeliveryPoint/SN:MarketDeliveryPoint.BiddingArea/SN:BiddingArea.marketCode ?bidzone
  }
  optional {?compensator SN:Equipment.networkAnalysisEnable ?network_analysis}
  filter(regex(?area, '${region}'))


  # Optionally extract current limits
  optional {
    ?_lim cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Equipment ?compensator;
          a cim:CurrentLimit;
          cim:IdentifiedObject.name '${rate}';
          cim:CurrentLimit.value ?_rate .
    # Convert rate from current to power using √3 * U [kV] * I [A] / 1000.0 [MVA]
    bind(1.7320508075688772 * xsd:double(xsd:string(?un)) * xsd:double(xsd:string(?_rate)) / 1000.0 as ?rate)
  }.}


   # Extract the mRID of the topological node of the connectivity node
  ?con_node cim:ConnectivityNode.TopologicalNode/cim:IdentifiedObject.mRID ?node_mrid .
  # Optionally extract in_service associated with compensator
  optional {?compensator ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService ?in_service} .

  # Extract connected flag and optionally power for each terminal
  ?terminal cim:ACDCTerminal.connected ?connected .
  optional {?terminal ^cim:SvPowerFlow.Terminal/cim:SvPowerFlow.p ?p .}
  bind(coalesce(?node_mrid, ?t_mrid) as ?node)

  # Create variables for node 1 and node 2
  bind(if(?nr = 1, str(?p), '') as ?p_1)
  bind(if(?nr = 1, ?node, '') as ?node_1)
  bind(if(?nr = 1, ?connected, False) as ?connected_1)
  bind(if(?nr = 1, ?bidzone, '') as ?bidzone_1)
  bind(if(?nr = 2, str(?p), '') as ?p_2)
  bind(if(?nr = 2, ?node, '') as ?node_2)
  bind(if(?nr = 2, ?connected, False) as ?connected_2)
  bind(if(?nr = 2, ?bidzone, '') as  ?bidzone_2)
} group by ?compensator
having ((count(*) > 1) && (max(?node_1) != max(?node_2)) && coalesce(max(?analysis_enabled), True))
