PREFIX cim: <${cim}>
PREFIX SN: <${SN}>
PREFIX rdf: <${rdf}>
PREFIX xsd: <${xsd}>
select ?node_1 ?node_2 ?status ?name ?mrid ?un ?pl_1 ?pl_2 ?r ?x ?b ?g ?angle ?rateNormal ?bidzone_1 ?bidzone_2
where
{
  {
    select  ?_p_mrid (count(distinct ?nr) as ?winding_count)
    where {
      ?_p_mrid rdf:type cim:PowerTransformer;
               ^cim:PowerTransformerEnd.PowerTransformer/cim:TransformerEnd.endNumber ?nr .
    }
    group by ?_p_mrid
    having (?winding_count = 2)
  } .
  ?_p_mrid cim:IdentifiedObject.name ?name;
           cim:Equipment.EquipmentContainer ?Substation;
           cim:Equipment.EquipmentContainer/cim:Substation.Region/cim:SubGeographicalRegion.Region/cim:IdentifiedObject.name ?area .
  filter(regex(?area, '${region}'))
  optional {?Substation SN:Substation.MarketDeliveryPoint/SN:MarketDeliveryPoint.BiddingArea/SN:BiddingArea.marketCode ?bidzone} .
  { # Search for winding 1 side
    select ?_p_mrid ?mrid ?r ?x ?b ?g (?connected as ?connected_1) (?p as ?p_1) ?node_1 ?rateNormal ?un
    where
    {
      ?w_mrid cim:TransformerEnd.Terminal ?_t_mrid;
              cim:PowerTransformerEnd.ratedU ?un;
              cim:PowerTransformerEnd.PowerTransformer ?_p_mrid;
              cim:PowerTransformerEnd.r ?r;
              cim:PowerTransformerEnd.x ?x;
              cim:PowerTransformerEnd.b ?b;
              cim:PowerTransformerEnd.g ?g;
              cim:IdentifiedObject.mRID ?mrid;
              cim:TransformerEnd.endNumber 1 .
      ?_t_mrid cim:IdentifiedObject.mRID ?t_mrid .
      optional {
        ?p_limNormal cim:OperationalLimit.OperationalLimitSet/cim:OperationalLimitSet.Terminal ?_t_mrid;
                     rdf:type cim:ActivePowerLimit;
                     cim:IdentifiedObject.name 'Normal@20';
                     cim:ActivePowerLimit.value ?rateNormal
      } .
      service <${repo}> {
        ?_t_mrid cim:Terminal.connected|cim:ACDCTerminal.connected ?connected;
                 cim:Terminal.TopologicalNode/cim:IdentifiedObject.mRID ?node .
        optional {?_t_mrid ^cim:SvPowerFlow.Terminal/cim:SvPowerFlow.p ?p .}
      } .
      bind(coalesce(?node, ?t_mrid) as ?node_1)
    }
  } .
  { # Search for winding 2 side
    select ?_p_mrid (?connected as ?connected_2) (?p as ?p_2) ?node_2 ?angle
    where
    {
      ?w_mrid cim:TransformerEnd.Terminal ?_t_mrid;
              cim:PowerTransformerEnd.PowerTransformer ?_p_mrid;
              cim:PowerTransformerEnd.phaseAngleClock ?angleclock;
              cim:TransformerEnd.endNumber 2 .
      ?_t_mrid cim:IdentifiedObject.mRID ?t_mrid .
      service <${repo}> {
        ?_t_mrid cim:Terminal.connected|cim:ACDCTerminal.connected ?connected;
                 cim:Terminal.TopologicalNode/cim:IdentifiedObject.mRID ?node .
        optional {?_t_mrid ^cim:SvPowerFlow.Terminal/cim:SvPowerFlow.p ?p . }
      }
      bind(coalesce(?node, ?t_mrid) as ?node_2)
      bind(xsd:double(30.0) * ?angleclock as ?angle)
    }
  }
  optional {
    bind((xsd:double(str(?p_1)) + xsd:double(str(?p_2))) as ?pl)
    bind(if (xsd:double(str(?p_1)) > xsd:double(str(?p_2)), ?pl, xsd:double(0.0)) as ?pl_2)
    bind(if (xsd:double(str(?p_1)) < xsd:double(str(?p_2)), ?pl, xsd:double(0.0)) as ?pl_1)
  }
  service <${repo}> {optional {?_p_mrid ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService ?in_service}}
  optional {?_p_mrid SN:Equipment.networkAnalysisEnable ?_network_analysis}
  bind(coalesce(?_network_analysis, True) as ?network_analysis)
  filter(?network_analysis)
  bind(coalesce(?in_service, ?connected_1 && ?connected_2) as ?status)
  bind(?bidzone as ?bidzone_1)
  bind(?bidzone as ?bidzone_2)
}
