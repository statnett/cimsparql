# Name: Synchronous machines
PREFIX cim: <${cim}>
PREFIX SN: <${SN}>
PREFIX xsd: <${xsd}>
select distinct ?mrid ?name ?market_code ?allocationmax ?node ?status ?station_group ?station_group_name ?substation_mrid ?maxP ?minP ?MO ?bidzone ?sn ?p ?q
where {
  # Extract properties for synchronous machines.
  ?machine a cim:SynchronousMachine;
         cim:IdentifiedObject.name ?name;
         cim:RotatingMachine.ratedS ?sn;
         cim:IdentifiedObject.mRID ?mrid;
         ^cim:Terminal.ConductingEquipment ?terminal;
         cim:Equipment.EquipmentContainer/cim:VoltageLevel.Substation ?substation .
  ?terminal cim:Terminal.ConnectivityNode ?con_node;
            cim:IdentifiedObject.mRID ?t_mrid .

  # Extract area and mrid for the substation associated with a sync machine
  ?substation cim:Substation.Region/cim:SubGeographicalRegion.Region/cim:IdentifiedObject.name ?area;
               cim:IdentifiedObject.mRID ?substation_mrid .

  # Optionally extract min/max operating power for each machin
  optional {
    ?machine cim:SynchronousMachine.GeneratingUnit ?gen_unit.
    ?gen_unit cim:GeneratingUnit.minOperatingP ?minP;
           cim:GeneratingUnit.maxOperatingP ?maxP .
  }
  filter regex(?area, '${region}')

  # Optionally extract bidzone for the substation associated with the sync machin
  optional {
    ?substation SN:Substation.MarketDeliveryPoint/SN:MarketDeliveryPoint.BiddingArea/SN:BiddingArea.marketCode ?bidzone
  } .

  # Opionally extract non-CIM standard properties generating units
  optional {
    select ?gen_unit ?market_code ?MO ?apctmax ?station_group ?station_group_name
    where
    {
      ?gen_unit SN:GeneratingUnit.marketCode ?market_code;
             SN:GeneratingUnit.groupAllocationWeight ?MO;
             SN:GeneratingUnit.ScheduleResource ?ScheduleResource;
             SN:GeneratingUnit.groupAllocationMax ?apctmax .
      ?ScheduleResource SN:ScheduleResource.marketCode ?station_group;
                        cim:IdentifiedObject.name ?station_group_name .
    }
  }

  # Extract connected flag and optionally mRID for the topological node associated with each terminal
  service <${repo}> {
    ?terminal cim:Terminal.connected|cim:ACDCTerminal.connected ?connected .
    optional {?terminal cim:Terminal.TopologyNode/cim:IdentifiedObject.mRID ?term_top_node_mrid}
  } .

  # Optionally extract the mRID of the toplogical node associated with the connectivity node for each sync machine
  optional { service <${repo}> {?con_node cim:ConnectivityNode.TopologicalNode/cim:IdentifiedObject.mRID ?con_top_node_mrid .}}

  # Optinoally extract in_service flag for each macchine, as well as active and reactive power
  service <${repo}> {
    optional {?machine ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService ?in_service} .
    optional {?machine cim:RotatingMachine.p ?p;cim:RotatingMachine.q ?q .}
  }
  optional {?machine SN:Equipment.networkAnalysisEnable ?_network_analysis}
  filter(?network_analysis)

  # Assign a node mRID for each sync machine. It is set as the first existing of
  # 1) mRID of the topological node associated with the connectivity node for the terminal associated
  #    with the sync machine
  # 2) mRID of the toplogical node associated with the terminal for the sync machine
  bind(coalesce(?con_top_node_mrid, ?term_top_node_mrid, ?t_mrid) as ?node)
  bind(coalesce(?_network_analysis, True) as ?network_analysis)

  # Assign a status flag. If exists, the in_service flag for the sync machine is used. Otherwise,
  # the connected flag of the terminal associated with the sync machine is used
  bind(coalesce(?in_service, ?connected) as ?status)
  bind(xsd:double(str(?apctmax)) * xsd:double(str(?maxP)) / 100.0 as ?allocationmax)
}
