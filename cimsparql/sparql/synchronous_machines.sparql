# Name: Synchronous machines
PREFIX cim: <${cim}>
PREFIX SN: <${SN}>
PREFIX xsd: <${xsd}>
select ?mrid ?name ?market_code ?node ?status ?station_group ?station_group_name ?substation_mrid ?maxP ?minP ?MO ?bidzone ?sn ?p ?q ?connectivity_node ?generator_type ?schedule_resource
where {
  # Extract properties for synchronous machines.
  {
    select * where {
      ?_eq_subject <http://entsoe.eu/CIM/EquipmentCore/3/1> ?eq_repo .
      service ?eq_repo {
        ?machine a cim:SynchronousMachine;
              cim:IdentifiedObject.mRID ?machine_mrid;
              cim:IdentifiedObject.name ?name;
              cim:RotatingMachine.ratedS ?sn;
              ^cim:Terminal.ConductingEquipment ?terminal;
              cim:Equipment.EquipmentContainer/cim:VoltageLevel.Substation ?substation .

        # TODO: Seems like cim15 uses SynchronousMachine while cim16 uses RotatingMachine. Will fix this when we have a proper cim16 model
        optional{
          values ?gen_type {cim:NuclearGeneratingUnit cim:MktGeneratingUnit cim:HydroGeneratingUnit cim:WindGeneratingUnit cim:ThermalGeneratingUnit cim:SolarGeneratingUnit}
          ?machine cim:SynchronousMachine.GeneratingUnit|cim:RotatingMachine.GeneratingUnit ?nullable_gen_unit .
          ?nullable_gen_unit a ?gen_type
        }
        bind(coalesce(?nullable_gen_unit, URI("http://no-gen-unit")) as ?gen_unit)

        ?terminal cim:Terminal.ConnectivityNode ?con_node .
        ?con_node cim:IdentifiedObject.mRID ?connectivity_node .

        # Extract area and mrid for the substation associated with a sync machine
        ?substation cim:Substation.Region/cim:SubGeographicalRegion.Region/cim:IdentifiedObject.name ?area;
                    cim:IdentifiedObject.mRID ?substation_mrid .

        # Optionally extract min/max operating power for each machin
        optional {
          ?gen_unit cim:IdentifiedObject.mRID ?gen_unit_mrid;
          	cim:GeneratingUnit.minOperatingP ?nullable_minP;
            cim:GeneratingUnit.maxOperatingP ?nullable_maxP.

        optional {
          ?gen_unit SN:GeneratingUnit.marketCode ?market_code;
                  SN:GeneratingUnit.groupAllocationWeight ?MO;
                  SN:GeneratingUnit.ScheduleResource ?ScheduleResource .
          ?ScheduleResource SN:ScheduleResource.marketCode ?station_group;
                          cim:IdentifiedObject.mRID ?schedule_resource;
                          cim:IdentifiedObject.name ?station_group_name .
        }
          }
        filter regex(?area, '${region}')

        # Optionally extract bidzone for the substation associated with the sync machin
        optional {
          ?substation SN:Substation.MarketDeliveryPoint/SN:MarketDeliveryPoint.BiddingArea/SN:BiddingArea.marketCode ?bidzone
        } .

        # Opionally extract non-CIM standard properties generating units
        optional {?machine SN:Equipment.networkAnalysisEnable ?_network_analysis}
        bind(if(bound(?gen_type), replace(str(?gen_type), str(cim:), ""), "unknown") as ?generator_type)
        bind(coalesce(?gen_unit_mrid, ?machine_mrid) as ?mrid)
      }
    }
  }

  ?terminal cim:ACDCTerminal.connected ?connected .
  {
    ?con_node cim:ConnectivityNode.TopologicalNode ?topological_node .
  } union {
    filter not exists {?con_node cim:ConnectivityNode.TopologicalNode ?topological_node}
    ?terminal cim:Terminal.TopologicalNode ?topological_node .
  }
  ?topological_node cim:IdentifiedObject.mRID ?node .

  optional {?machine ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService ?in_service} .
  optional {?machine cim:RotatingMachine.p ?p;cim:RotatingMachine.q ?q .}

  bind(coalesce(?_network_analysis, True) as ?network_analysis)
  bind(coalesce(?in_service, ?connected) as ?status)
  bind(coalesce(?nullable_maxP, if(xsd:double(str(?p)) >= 0.0, ?p, 0.0), 0.0) as ?maxP)
  bind(coalesce(?nullable_minP, if(xsd:double(str(?p)) < 0.0, ?p, 0.0), 0.0) as ?minP)
  filter(?network_analysis)
}
