# Name: Converters
PREFIX cim:<${cim}>
PREFIX xsd:<${xsd}>
PREFIX SN:<${SN}>
PREFIX ALG:<${ALG}>
select ?mrid ?name ?alias ?p ?q ?substation_mrid ?status ?node ?connectivity_node ?controller ?controller_factor ?pole_loss ?loss0 ?loss1 ?loss2 ?vdcn ?un
where {
  {
    select * where {
      ?_eq_subject <http://entsoe.eu/CIM/EquipmentCore/3/1> ?eq_repo .
      service ?eq_repo {
        # Extract mrid, name, substation and optionally aliasName of the converter
        ?converter cim:IdentifiedObject.mRID ?mrid;
                  cim:IdentifiedObject.name ?name;
		  ALG:VoltageSourceConverter.DCPole|ALG:DCConverter.DCPole ?pole.

        ?pole ALG:DCPole.DCController/cim:IdentifiedObject.mRID ?controller;
              ALG:DCPole.participationFactor ?controller_factor.

        optional {?converter cim:IdentifiedObject.aliasName ?alias .}
        # Extract properties for the terminals for the converter
        ?terminal cim:Terminal.ConductingEquipment ?converter;
                  cim:Terminal.ConnectivityNode ?con_node;
                  cim:Terminal.sequenceNumber|cim:ACDCTerminal.sequenceNumber 1 .
        ?con_node cim:IdentifiedObject.mRID ?connectivity_node;
		  cim:ConnectivityNode.ConnectivityNodeContainer ?con_node_container.
	?con_node_container cim:VoltageLevel.Substation ?substation;
		      cim:VoltageLevel.BaseVoltage/cim:BaseVoltage.nominalVoltage ?un.
        ?substation cim:IdentifiedObject.mRID ?substation_mrid;
          cim:Substation.Region/cim:SubGeographicalRegion.Region/cim:IdentifiedObject.name ?area .
        optional {?converter SN:Equipment.networkAnalysisEnable ?_analysis_enabled .}
	optional {
          ?converter ALG:VoltageSourceConverter.loss0 ?_loss0;
                     ALG:VoltageSourceConverter.loss1 ?_loss1;
		     ALG:VoltageSourceConverter.loss2 ?_loss2.
	  ?pole cim:ConductingEquipment.BaseVoltage/cim:BaseVoltage.nominalVoltage ?_vdcn;
	}
        bind(coalesce(?_analysis_enabled, True) as ?analysis_enabled)
	bind(coalesce(?_loss0, 0.0) as ?loss0)
	bind(coalesce(?_loss1, 0.0) as ?loss1)
	bind(coalesce(?_loss2, 0.0) as ?loss2)
	bind(coalesce(?_vdcn, 0.0) as ?vdcn)
        filter(?analysis_enabled)
      }
    }
  }

  # Extract active and reactive power for the converter
  ?converter cim:ACDCConverter.p ?p;
             cim:ACDCConverter.q ?q.

  optional {?converter cim:ACDCConverter.poleLossP ?_pole_loss.}
  optional {?converter ^cim:SvStatus.ConductingEquipment/cim:SvStatus.inService ?in_service .}

  # Extract connected and optionally the mrid for the topological node associated with the terminal
  ?terminal cim:ACDCTerminal.connected ?connected .

  {
    ?con_node cim:ConnectivityNode.TopologicalNode ?topological_node .
  } union {
    filter not exists {?con_node cim:ConnectivityNode.TopologicalNode ?topological_node}
    ?terminal cim:Terminal.TopologicalNode ?topological_node .
  }
  ?topological_node cim:IdentifiedObject.mRID ?node .

  bind(coalesce(?in_service, ?connected) as ?status)
  bind(coalesce(?_pole_loss, 0.0) as ?pole_loss)
}
